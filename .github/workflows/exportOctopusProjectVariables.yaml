name: Export Project Variables
on:
  # push:
  #   branches: 
  #     - main
  workflow_call:
    inputs: 
      ProjectName: 
        type: string
        required: true
        description: 'Octopus VariableSet Name'
      octopus_url:
        type: string
        required: true
        #default: ""    
jobs:
  export-project-variable:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: PowerShell script to export project variables
      shell: pwsh
      env:
        OCTOPUS_SERVER_URL: ${{ inputs.octopus_url }}
        OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        ProjectName: ${{ inputs.ProjectName }}
        #GITHUB_TOKEN: ${{ secrets.TOKEN }}
        #variableSetName: ${{ github.event.inputs.VariableSetName }}
      run: |
        # This is where you put your PowerShell script content
        # For example, you can run a specific PowerShell script file:
        #./exportProjectVariable_Pattern1.ps1
        # Set your Octopus Deploy details
        $octopusUrl = "${{ inputs.octopus_url }}"
        $apiKey = "$env:OCTOPUS_API_KEY"
        $projectName = "${{ inputs.ProjectName }}"
        $spaceName = "Default"
        #dirName = "Octopus"
        ## Check if file exists or not
        if (!(Test-Path -Path "$projectName" -PathType Container)) {
          $dir = New-Item -Path "$projectName" -ItemType "directory"
        }
        else {
          Write-Host "$projectName directory already exists, proceeding..."
        }
       
        # Define the output JSON file path
        $outputFilePath = "$dir/$projectName-vars.json"
        # $path = "$dir"
        # $acl = Get-Acl $path
        # $rule = New-Object System.Security.AccessControl.FileSystemAccessRule("Users","FullControl","Allow")
        # $acl.SetAccessRule($rule)
        # Set-Acl -Path $path -AclObject $acl

        # Function to make REST API requests
        function Invoke-OctopusApi {
            param (
                [string]$Url,
                [string]$Method = "GET",
                [string]$Body = $null
            )

            $header = @{
                "X-Octopus-ApiKey" = $apiKey
            }

            try {
                $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $header -ContentType "application/json" -Body $Body -ErrorAction Stop
                return $response
            } catch {
                Write-Host "Error occurred: $($_.Exception.Message)"
                exit
            }
        }

        # Get space
        $spaceUrl = "$octopusURL/api/spaces/all"
        $spaceList = Invoke-OctopusApi -Url $spaceUrl
        #$spaceList = Invoke-RestMethod "$octopusURL/api/spaces/all" -Headers $header
        $space = $spaceList | Where-Object { $_.Name -eq $spaceName }
        if ($space -eq $null) {
            Write-Host "Space '$spaceName' not found."
            exit
        }

        # Get Source project
        $sourceProjectUrl = "$octopusURL/api/$($space.Id)/projects/all"
        $projectList = Invoke-OctopusApi -Url $sourceProjectUrl
        #$projectList = Invoke-RestMethod "$octopusURL/api/$($space.Id)/projects/all" -Headers $header
        $sourceProject = $projectList | Where-Object { $_.Name -eq $projectName }
        #$sourceProjectVariableSetId = $sourceProject.VariableSetId 

        # Check if project is found
        if ($sourceProject -eq $null) {
            Write-Host "Project '$projectName' not found."
            exit
        }

        # Get all variables and library variable sets
        $variablesUrl = "$octopusUrl/api/$($space.Id)/projects/$($sourceProject.Id)/variables" # variables/$projectName/all"
        #$variablesUrl = "$octopusUrl/api/variables/$projectName/all"
        $variablesResponse = Invoke-OctopusApi -Url $variablesUrl

        # Check if data is returned
        if ($variablesResponse -eq $null) {
            Write-Host "No data returned from the URL $variablesResponse."
            exit
        }

        # Convert response to JSON and save to file
        $variablesResponse | ConvertTo-Json -Depth 10 | Out-File -FilePath $outputFilePath

        Write-Host "Variables data has been exported and saved to $outputFilePath"
    - name: Check for changes
      id: check_changes
      # env: 
      #   GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      run: |
        if ((git status --porcelain) -ne $null) {
          echo "there are new changes";
          git config --global user.name 'Github Action'
          git config --global user.email 'actions@users.noreply.github.com'
          #git remote set-url origin https://github.com/${GITHUB_REPOSITORY}.git
          git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          #git checkout "${GITHUB_REF:11}"
          #git checkout -b "GH-Auto"
          git add -A
          git commit -m "Auto-generated: Added extracted Octopus variables file"
          git push origin HEAD:develop
          #git push origin "${GITHUB_REF:11}"
          #git push origin GH-Auto
        }
        else {
          echo "Your branch is up to date."
        }

