### Adding variable to the Octopus Project scope with Multi-env scopping 
### Test-case: 1
name: Add project variables from the file - pattern-3
on:
  workflow_call:
    inputs:
      projectName:
        type: string 
        required: true
        description: Octopus Project Name
        #default: project-1
      octopus_url:
        type: string
        required: true
        #default: "https://deploy1.octopus.app"
      variableFilePath:
        type: string
        required: true
        description: Source variable file path
        #default: "**/variable-2.json"
    #   octopusApiName:
    #     type: string 
    #     required: true
    #     description: 'Secret name of Octopus API'
    
        
jobs:
  Add-variables-to-Octopus-project:
    runs-on: windows-latest

    steps:
    # - name: Checkout code
    #   uses: actions/checkout@v2
    - name: Download project variable JSON
      uses: actions/download-artifact@v4
      with:
        name: final-project-variable-${{ github.run_id }}
        path: octopus-final

    - name: List files for debugging
      run: |
        ls -LiteralPath ./octopus-final
    - name: Powershell script to add project variables
      env: 
        OCTOPUS_API_NAME: ${{ inputs.octopusApiName }}
        variableFilePath: "octopus-final/variable-2.json      "
      run: |
        # Define variables
        $octopusURL = "${{ github.event.inputs.octopus_url }}"
        $apiKey = "${{ secrets.OCTOPUS_API_KEY }}"
        #$apiKey = "${{ secrets[inputs.octopusApiName] }}"
        $sourceVariableFile = "octopus-final/${{ inputs.variableFilePath }}"
        #$sourceVariableFile = $env:variableFilePath
        $projectName = "${{ inputs.ProjectName }}"
        $spaceName = "Default"
        $header = @{ 
            "X-Octopus-ApiKey" = $apiKey
            "Content-Type" = "application/json" 
        }
        
        # Function to get environment ID by name
        function Get-EnvironmentIdByName {
            param (
                [string]$environmentName,
                [array]$environmentList
            )
        
            foreach ($env in $environmentList) {
                if ($env.Name -eq $environmentName) {
                    return $env.Id
                }
            }
            return $null
        }
        
        # Function to get environment name by ID
        function Get-EnvironmentNameById {
            param (
                [string]$environmentId,
                [array]$environmentList
            )
        
            foreach ($env in $environmentList) {
                if ($env.Id -eq $environmentId) {
                    return $env.Name
                }
            }
            return $null
        }
        
        # Get space
        $spaces = Invoke-RestMethod -Method Get -Uri "$octopusURL/api/spaces/all" -Headers $header
        if (-not $spaces) {
            Write-Error "Failed to retrieve spaces from Octopus Deploy."
            exit 1
        }
        
        $space = $spaces | Where-Object { $_.Name -eq $spaceName }
        if (-not $space) {
            Write-Error "Space '$spaceName' not found."
            exit 1
        }
        
        # Get environment list
        $destinationEnvironmentList = Invoke-RestMethod -Method Get -Uri "$octopusURL/api/$($space.Id)/environments/all" -Headers $header
        if (-not $destinationEnvironmentList) {
            Write-Error "Failed to retrieve environments from Octopus Deploy."
            exit 1
        }
        
        # Get destination project
        $projects = Invoke-RestMethod -Method Get -Uri "$octopusURL/api/$($space.Id)/projects/all" -Headers $header
        if (-not $projects) {
            Write-Error "Failed to retrieve projects from Octopus Deploy."
            exit 1
        }
        
        $project = $projects | Where-Object { $_.Name -eq $projectName }
        if (-not $project) {
            Write-Error "Project '$projectName' not found."
            exit 1
        }
        
        # Get project variables
        $projectVariables = Invoke-RestMethod -Method Get -Uri "$octopusURL/api/$($space.Id)/projects/$($project.Id)/variables" -Headers $header
        if (-not $projectVariables) {
            Write-Error "Failed to retrieve project variables from Octopus Deploy."
            exit 1
        }
        
        # Ensure the Variables property is initialized
        if (-not $projectVariables.Variables) {
            $projectVariables.Variables = @()
        }
        
        # Clear existing variables
        $projectVariables.Variables = @()
        
        # Load source variable file
        $sourceVariables = Get-Content -Path $sourceVariableFile | ConvertFrom-Json
        if (-not $sourceVariables) {
            Write-Error "Failed to load source variables from file '$sourceVariableFile'."
            exit 1
        }
        
        # Track errors
        $errorOccurred = $false
        
        try {
            # Process each source variable
            foreach ($sourceVariable in $sourceVariables.Variables) {
                $name = $sourceVariable.Name
                $value = $sourceVariable.Value
                $type = $sourceVariable.Type
                $scopeEnvironments = $sourceVariable.Scope.Environment
                $scopeRoles = $sourceVariable.Scope.Role

                # Check for sensitive variables
                if ($sourceVariable.IsSensitive -eq $true) {
                    Write-Host "Warning: Setting sensitive value for $($name) to DUMMY VALUE" -ForegroundColor Yellow
                    $value = "DUMMY VALUE"
                }
        
                # Check for account type variables
                if ($sourceVariable.Type -match ".*Account") {
                    Write-Host "Warning: Cannot convert account type to destination account. Setting to DUMMY VALUE" -ForegroundColor Yellow
                    $value = "DUMMY VALUE"
                }
        
                # Check for certificate type variables
                if ($sourceVariable.Type -match ".*Certificate") {
                    Write-Host "Warning: Cannot convert certificate type to destination certificate. Setting to DUMMY VALUE" -ForegroundColor Yellow
                    $value = "DUMMY VALUE"
                }
        
                # Map environment names to their IDs
                $environmentIds = @()
                foreach ($envName in $scopeEnvironments) {
                    $envId = Get-EnvironmentIdByName -environmentName $envName -environmentList $destinationEnvironmentList
                    if ($envId) {
                        $environmentIds += $envId
                    } else {
                        Write-Error "Environment name '$envName' not found in destination environment list."
                        $errorOccurred = $true
                    }
                }
        
                # Only add the variable if no errors occurred
                if (-not $errorOccurred) {
                    # Create new variable
                    $newVariable = @{
                        Name = $name
                        Value = $value
                        Type  = $type
                        Scope = @{
                            Environment = $environmentIds
                        }
                    }

                    # Include Role scope if it exists
                    if ($scopeRoles) {
                        Write-Output "The variable '$name' with the value '$value' has a Role scope and is being added..."
                        $newVariable.Scope.Role = $scopeRoles
                    }

                    # Add new variable to project variables
                    $projectVariables.Variables += [PSCustomObject]$newVariable
                    Write-Output "Added new variable '$name' with value '$value' in environments: $($scopeEnvironments -join ', ')"
                }
            }
        
            # Update the project variables if no errors occurred
            if (-not $errorOccurred) {
                Write-Host "Saving variables to $octopusURL$($project.Links.Variables)"
                $jsonBody = $projectVariables | ConvertTo-Json -Depth 10
                Write-Output $jsonBody  # Output the JSON body for debugging
                Invoke-RestMethod -Method Put -Uri "$octopusURL$($project.Links.Variables)" -Headers $header -Body $jsonBody
                Write-Output "Project variables updated successfully."
            } else {
                Write-Error "Errors occurred during variable processing. Aborting update."
            }
        }
        catch {
            Write-Error "Failed to update project variables. Error: $_"
        }
      
    - name: Clear Workspace
      if: always()
      run: |
        ls -LiteralPath ${{ github.workspace }}
        rm -Recurse ${{ github.workspace }}\*
        Write-Output "Workspace has been cleared"
        ls -LiteralPath ${{ github.workspace }}