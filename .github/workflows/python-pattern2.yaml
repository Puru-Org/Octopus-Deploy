name: Export Global Variables to Project JSON
on:
  workflow_call:
    inputs: 
      global_ref_json: 
        type: string
        required: true
        description: 'Path to the JSON file containing source data'
      project_variable_json:
        type: string
        required: true
        description: 'Path to the JSON file containing project variables'

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: python:3.10
    #   credentials:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set environment variables
      run: |
        echo "GLOBAL_REF_JSON=${{ inputs.global_ref_json }}" >> $GITHUB_ENV
        echo "PROJECT_VARIABLE_JSON=${{ inputs.project_variable_json }}" >> $GITHUB_ENV

    - name: Install Python dependencies
      run: pip install requests

    - name: Run Python script
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python - <<'EOF'
        import json
        import requests
        import os

        def fetch_json_from_raw_url(raw_url):
            headers = {
                'Authorization': f'token {os.getenv("GH_TOKEN")}',
                'Accept': 'application/vnd.github.v3.raw'
            }
            response = requests.get(raw_url, headers=headers)
            if response.status_code != 200:
                raise Exception(f"Error fetching JSON from URL '{raw_url}': {response.status_code} {response.reason}")
            return response.json()

        def extract_and_add_variable(source_json_url, project_variable_json, variable_names):
            source_data = fetch_json_from_raw_url(source_json_url)

            with open(project_variable_json, 'r') as f:
                dest_data = json.load(f)

            dest_environment_list = dest_data["ScopeValues"]["Environments"]
            dest_environment_dict = {env["Id"]: env["Name"] for env in dest_environment_list}

            for variable_name in variable_names:
                existing_variables = [variable for variable in dest_data["Variables"] if variable["Name"] == variable_name]
                if variable_name in existing_variables:
                    print(f"Variable '{variable_name}' already exists in the destination '{project_variable_json}' file.")
                else:
                    print(f"Adding the '{variable_name}' Variable property block to the destination '{project_variable_json}' file")
                    extracted_data = [variable for variable in source_data if variable.get("Name") == variable_name]

                    dest_data["Variables"].extend(extracted_data)

            with open(project_variable_json, 'w') as f:
                json.dump(dest_data, f, indent=2)

        # Read source data from environment variable
        global_ref_json_path = os.getenv("GLOBAL_REF_JSON")
        with open(global_ref_json_path, 'r') as f:
            source_data = json.load(f)

        # Process each source data entry
        for data_entry in source_data:
            source_json_url = data_entry["global_variable_json_url"]
            variable_names = data_entry["variable_names"]
            project_variable_json = os.getenv("PROJECT_VARIABLE_JSON")  # Assuming same destination JSON file for all sources

            # Call function to extract and add variables to destination JSON
            if data_entry.get("copy_all"):
                all_variables = fetch_json_from_raw_url(source_json_url)
                variable_names.extend(variable["Name"] for variable in all_variables)

            extract_and_add_variable(source_json_url.strip(), project_variable_json, variable_names)
        EOF
    - name: Get content of ${{ inputs.project_variable_json }}
      run: |
        cat ${{ inputs.project_variable_json }}
    - name: Clear Workspace
      if: always()
      run: |
        ls -la ${{ github.workspace }}
        rm -rf ${{ github.workspace }}/*
        ls ${{ github.workspace }}    
